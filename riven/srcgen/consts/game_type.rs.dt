{{
    const dotUtils = require('./dotUtils.js');
    const gameTypes = require('./.gameTypes.json');
}}{{= dotUtils.preamble() }}

use serde::{ Serialize, Deserialize };
use strum_macros::{ EnumString, Display, AsRefStr, IntoStaticStr };

/// League of Legends game type: matched game, custom game, or tutorial game.
#[derive(Debug, Copy, Clone)]
#[derive(Eq, PartialEq, Hash)]
#[derive(EnumString, Display, AsRefStr, IntoStaticStr)]
#[derive(Serialize, Deserialize)]
#[repr(u8)]
pub enum GameType {
{{
    for (const e of gameTypes) {
        const desc = e['x-desc'] ? e['x-desc'].split('\n') : [];
        const nameNoGame = e['x-name'].replace(/_GAME$/, "");
}}
{{~ desc :line }}
    /// {{= line }}
{{~}}
    #[strum(to_string = "{{= e['x-name'] }}", serialize = "{{= nameNoGame }}")]
    #[serde(alias = "{{= nameNoGame }}")]
    {{= e['x-name'] }},
{{
    }
}}
}

impl GameType {
    /// https://github.com/RiotGames/developer-relations/issues/898
    pub(crate) fn serialize_empty<S>(
        val: &Option<Self>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::Serialize;
        if let Some(val) = val {
            val.serialize(serializer)
        } else {
            "".serialize(serializer)
        }
    }

    /// https://github.com/RiotGames/developer-relations/issues/898
    pub(crate) fn deserialize_empty<'de, D>(
        deserializer: D,
    ) -> Result<Option<Self>, D::Error>
    where
        D: serde::de::Deserializer<'de>,
    {
        use serde::de::IntoDeserializer;
        let opt = Option::<String>::deserialize(deserializer)?;
        match opt.as_deref() {
            None | Some("") => Ok(None),
            Some(s) => Self::deserialize(s.into_deserializer()).map(Some)
        }
    }
}

#[cfg(test)]
mod test;
